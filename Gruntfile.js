'use strict';
module.exports = function(grunt) {

	// load all tasks
	require('load-grunt-tasks')(grunt, {scope: 'devDependencies'});

	grunt.initConfig({
		pkg: grunt.file.readJSON('package.json'),

		newer: {
			options: {
				override: function (detail, include) {
					if (detail.task == 'sass') {
						if (detail.path.match('^assets/scss/')) {
							include(true);
						}
						else {
							include(false);
						}
					}
					else {
						include(false);
					}
				}
			}
		},

		makepot: {
			target: {
				options: {
					domainPath: '/translation/', // Where to save the POT file.
					potFilename: '8maerz.pot', // Name of the POT file.
					type: 'wp-theme',
					exclude: ['build/.*'],
					updateTimestamp: false,
					updatePoFiles: true
				}
			}
		},
		jshint: {
			files: [
			        'assets/js/**/*.js',
			        '!assets/js/**/*min.js',
			        '!assets/js/Copy*.js',
			        ],
			        options: {
			        	expr: true,
			        	globals: {
			        		jQuery: true,
			        		console: true,
			        		module: true,
			        		document: true
			        	}
			        }
		},

		modernizr: {
			dist: {
				parseFiles: true,
				cache: true,
				dest: 'assets/js/vendor/modernizr/modernizr-min.js',
				devFile: false,
				tests: [],
			    excludeTests: [ 'hidden', 'sizes', 'srcset' ],
			    customTests: [],
			    crawl : true,
				uglify: true,
				options: [ 'setClasses' ],
				files: {
					src: [ 'assets/scss/**/*.scss', 'assets/js/**/*.js' ]
				}

			}
		},

		// uglify targets are dynamically generated by the minify task
		uglify: {
			options: {
				banner: '/*! <%= pkg.name %> <%= ugtargets[grunt.task.current.target].filename %> <%= grunt.template.today("yyyy-mm-dd h:MM:ss TT") %> */\n',
				report: 'min',
			},
		},

		minify: {
			dist: {
				files: grunt.file.expandMapping(['assets/js/**/*.js', '!assets/js/**/*min.js'], '', {
					rename: function(destBase, destPath) {
						return destBase+destPath.replace('.js', '.min.js');
					}
				})
			},
		},

		jscs: {
			src: [
			      'assets/js/**/*.js'
			      ],
			      options: {
			      }
		},

		phpcs: {
			theme: {
				src: ['*.php', 'inc/**/*.php', 'templates/**/*.php' ]//, 'comment-mail/**/*.php' */ ]
			},
			options: {
				bin: 'phpcs -p -s -v -n ',
				standard: './phpcs.xml'
			}
		},

		delegate: {
			sass: {
				src: [ '<%= sass.dev.files.src %>**/*.scss' ],
				dest: '<%= sass.dev.files.dest %>'
			}
		},

		sass: {
			dev: {
				options: {
					style: 'expanded',
					sourcemap: 'none',
					lineNumbers: true,
					compass: true,
				},
				files: [ { expand: true,
					cwd: 'assets/scss',
					src: [ '**/*.scss', '!**/_*.scss', '!vendor/**/*.scss' ],
					dest: 'assets/css',
					ext: '.css' },
					]
			},
			dist: {
				options: {
					style: 'compressed',
					sourcemap: 'none',
					compass: true,
				},
				files: [ { expand: true,
					cwd: 'assets/scss',
					src: [ '**/*.scss', '!**/_*.scss', '!vendor/**/*.scss' ],
					dest: 'assets/css',
					ext: '.min.css' },
					]
			}
		}
	} );

	grunt.registerTask( 'delegate', function() {
		grunt.task.run( this.args.join( ':' ) );
	} );

	// dynamically generate uglify targets
	grunt.registerMultiTask('minify', function () {
		this.files.forEach(function (file) {
			var path = file.src[0],
			target = path.match(/([^.]*)\.js/)[1];

			// store some information about this file in config
			grunt.config('ugtargets.' + target, {
				path: path,
				filename: path.split('/').pop()
			});

			// create and run an uglify target for this file
			grunt.config('uglify.' + target + '.files', [{
				src: [path],
				dest: path.replace(/^(.*)\.js$/, '$1.min.js')
			}]);
			grunt.task.run('uglify:' + target);
		});
	});

	grunt.registerTask( 'default', [
      'newer:makepot',
      //'newer:jscs',
      //'newer:phpcs',
      'newer:delegate:sass',
      //'modernizr:dist',
      'newer:minify',
  ] );
};
